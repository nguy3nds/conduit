/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { IStorage, StorageValueType } from '../../types';
export declare const StorageKey: string;
export declare class Storage<T = StorageValueType> implements IStorage<T> {
    readonly provider: IStorage<T>;
    readonly prefix: string;
    set(key: string, value: T): void;
    delete(key: string): void;
    get<R = T>(key: string): R | void;
    exists(key: string): boolean;
    clear(): void;
    protected constructor(provider: IStorage<T>, suffix?: string);
    static makeStorage(persistent?: boolean, suffix?: string): IStorage;
}
