{"ast":null,"code":"var _jsxFileName = \"/Users/nguyencanhnguyen/Public/Development/condi-app/src/pages/Settings/components/FormSettings/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { withFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport * as Yup from \"yup\"; // import { RootState } from \"../../../..\";\n\nimport { saveUserInStore } from \"../../../../redux/actions\";\nimport { updateUser } from \"../../apis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormSettings(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const user = useSelector(state => state.user.data);\n  const {\n    setFieldValue\n  } = props;\n  useEffect(() => {\n    setFieldValue(\"imageURL\", user.image);\n    setFieldValue(\"username\", user.username);\n    setFieldValue(\"bio\", user.bio);\n    setFieldValue(\"email\", user.email);\n  }, [user, setFieldValue]);\n  const [error, setError] = useState();\n  const token = window.localStorage.getItem(\"jwtToken\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const {\n      imageURL,\n      bio,\n      username,\n      email,\n      password\n    } = props.values;\n    updateUser({\n      imageURL,\n      bio,\n      username,\n      email,\n      password\n    }, token).then(res => {\n      const user = res.data.user;\n      dispatch(saveUserInStore.saveUserInStoreSuccess(user));\n      history.push(`/profile/${user.username}`);\n    }).catch(e => {\n      const errorObject = { ...e.response.data.errors\n      };\n      setError(errorObject);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"form-group\",\n        children: error && Object.keys(error).map((obj, i) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error-messages\",\n              children: [obj, \" \", error[obj]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          placeholder: \"URL of profile picture\",\n          name: \"imageURL\",\n          value: props.values.imageURL,\n          onChange: props.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control form-control-lg\",\n          type: \"text\",\n          placeholder: \"Username\",\n          name: \"username\",\n          value: props.values.username,\n          onChange: props.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control form-control-lg\",\n          placeholder: \"Short bio about you\",\n          rows: 6,\n          name: \"bio\",\n          value: props.values.bio,\n          onChange: props.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control form-control-lg\",\n          type: \"text\",\n          placeholder: \"Email\",\n          name: \"email\",\n          value: props.values.email,\n          onChange: props.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control form-control-lg\",\n          type: \"password\",\n          placeholder: \"Password\",\n          name: \"password\",\n          value: props.values.password,\n          onChange: props.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-lg btn-primary pull-xs-right\",\n        children: \"Update Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormSettings, \"9yBN3MTRjyfTveTivBbPWxqFMTA=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = FormSettings;\nconst FormikFormSettings = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      imageURL: \"\",\n      username: \"\",\n      bio: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    username: Yup.string().required(\"Username is required\"),\n    email: Yup.string().email().required(\"Email is required\")\n  }),\n  handleSubmit: () => {}\n})(FormSettings);\nexport default FormikFormSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormSettings\");","map":{"version":3,"sources":["/Users/nguyencanhnguyen/Public/Development/condi-app/src/pages/Settings/components/FormSettings/index.tsx"],"names":["withFormik","React","useEffect","useState","useDispatch","useSelector","useHistory","Yup","saveUserInStore","updateUser","FormSettings","props","dispatch","history","user","state","data","setFieldValue","image","username","bio","email","error","setError","token","window","localStorage","getItem","handleSubmit","e","preventDefault","imageURL","password","values","then","res","saveUserInStoreSuccess","push","catch","errorObject","response","errors","Object","keys","map","obj","i","handleChange","FormikFormSettings","mapPropsToValues","validationSchema","object","shape","string","required"],"mappings":"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","sourcesContent":["import { withFormik, InjectedFormikProps } from \"formik\";\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport * as Yup from \"yup\";\n// import { RootState } from \"../../../..\";\nimport { saveUserInStore } from \"../../../../redux/actions\";\nimport { updateUser } from \"../../apis\";\nimport { FormValues, FormProps } from \"./interface\";\n\nfunction FormSettings(props: InjectedFormikProps<FormProps, FormValues>) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const user = useSelector((state: any) => state.user.data);\n  const { setFieldValue } = props;\n\n  useEffect(() => {\n    setFieldValue(\"imageURL\", user.image);\n    setFieldValue(\"username\", user.username);\n    setFieldValue(\"bio\", user.bio);\n    setFieldValue(\"email\", user.email);\n  }, [user, setFieldValue]);\n\n  const [error, setError] = useState();\n  const token = window.localStorage.getItem(\"jwtToken\");\n\n  const handleSubmit = (e: SyntheticEvent) => {\n    e.preventDefault();\n    const { imageURL, bio, username, email, password } = props.values;\n\n    updateUser({ imageURL, bio, username, email, password }, token)\n      .then((res) => {\n        const user = res.data.user;\n        dispatch(saveUserInStore.saveUserInStoreSuccess(user));\n        history.push(`/profile/${user.username}`);\n      })\n      .catch((e) => {\n        const errorObject = { ...e.response.data.errors };\n        setError(errorObject);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <fieldset>\n        <ul className=\"form-group\">\n          {error &&\n            Object.keys(error).map((obj, i) => {\n              return (\n                <li key={i}>\n                  <p className=\"error-messages\">\n                    {obj} {error[obj]}\n                  </p>\n                </li>\n              );\n            })}\n        </ul>\n        <fieldset className=\"form-group\">\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"URL of profile picture\"\n            name=\"imageURL\"\n            value={props.values.imageURL}\n            onChange={props.handleChange}\n          />\n        </fieldset>\n        <fieldset className=\"form-group\">\n          {/* <p className=\"error-messages\">{props.errors.username}</p> */}\n\n          <input\n            className=\"form-control form-control-lg\"\n            type=\"text\"\n            placeholder=\"Username\"\n            name=\"username\"\n            value={props.values.username}\n            onChange={props.handleChange}\n          />\n        </fieldset>\n        <fieldset className=\"form-group\">\n          <textarea\n            className=\"form-control form-control-lg\"\n            placeholder=\"Short bio about you\"\n            rows={6}\n            name=\"bio\"\n            value={props.values.bio}\n            onChange={props.handleChange}\n          ></textarea>\n        </fieldset>\n        <fieldset className=\"form-group\">\n          {/* <p className=\"error-messages\">{props.errors.email}</p> */}\n          <input\n            className=\"form-control form-control-lg\"\n            type=\"text\"\n            placeholder=\"Email\"\n            name=\"email\"\n            value={props.values.email}\n            onChange={props.handleChange}\n          />\n        </fieldset>\n        <fieldset className=\"form-group\">\n          <input\n            className=\"form-control form-control-lg\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={props.values.password}\n            onChange={props.handleChange}\n          />\n        </fieldset>\n        <button className=\"btn btn-lg btn-primary pull-xs-right\">\n          Update Settings\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nconst FormikFormSettings = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      imageURL: \"\",\n      username: \"\",\n      bio: \"\",\n      email: \"\",\n      password: \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    username: Yup.string().required(\"Username is required\"),\n    email: Yup.string().email().required(\"Email is required\"),\n  }),\n  handleSubmit: () => {},\n})(FormSettings);\n\nexport default FormikFormSettings;\n"]},"metadata":{},"sourceType":"module"}