{"ast":null,"code":"var _jsxFileName = \"/Users/nguyencanhnguyen/Public/Development/condi-app/src/pages/SignIn/components/FormSignIn/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { postUsersSignIn } from \"../../apis\";\nimport { saveUserInStore } from \"../../../../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormLogin(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [error, setError] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = props.values;\n    postUsersSignIn({\n      email,\n      password\n    }).then(res => {\n      const user = res.data.user;\n      history.push(\"/\");\n      dispatch(saveUserInStore.saveUserInStoreSuccess({\n        user\n      }));\n      window.localStorage.setItem(\"jwtToken\", user.token);\n    }).catch(e => setError(true));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-messages\",\n        children: error && \"Email or password is invalid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-messages\",\n        children: props.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"text\",\n        placeholder: \"Email\",\n        name: \"email\",\n        value: props.values.email,\n        onChange: props.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-messages\",\n        children: props.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"password\",\n        placeholder: \"Password\",\n        name: \"password\",\n        value: props.values.password,\n        onChange: props.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-lg btn-primary pull-xs-right\",\n      disabled: !props.isValid || !props.values.email,\n      children: \"Sign in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormLogin, \"1+3StOO6ZbZGD2PcNRZt7EeDa94=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = FormLogin;\nconst FormikFormLogin = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    email: Yup.string().email().required(\"Email is required\"),\n    password: Yup.string().required(\"Please provide a valid password\")\n  }),\n  handleSubmit: () => {}\n})(FormLogin);\nexport default FormikFormLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormLogin\");","map":{"version":3,"sources":["/Users/nguyencanhnguyen/Public/Development/condi-app/src/pages/SignIn/components/FormSignIn/index.tsx"],"names":["React","useState","withFormik","Yup","useDispatch","useHistory","postUsersSignIn","saveUserInStore","FormLogin","props","dispatch","history","error","setError","handleSubmit","e","preventDefault","email","password","values","then","res","user","data","push","saveUserInStoreSuccess","window","localStorage","setItem","token","catch","errors","handleChange","isValid","FormikFormLogin","mapPropsToValues","validationSchema","object","shape","string","required"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,UAAT,QAAgD,QAAhD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,eAAT,QAAgC,2BAAhC;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAAsE;AAAA;;AACpE,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMa,YAAY,GAAIC,CAAD,IAAuB;AAC1CA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBT,KAAK,CAACU,MAAlC;AACAb,IAAAA,eAAe,CAAC;AAAEW,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,CAAf,CACGE,IADH,CACSC,GAAD,IAAS;AACb,YAAMC,IAAI,GAAGD,GAAG,CAACE,IAAJ,CAASD,IAAtB;AACAX,MAAAA,OAAO,CAACa,IAAR,CAAa,GAAb;AACAd,MAAAA,QAAQ,CAACH,eAAe,CAACkB,sBAAhB,CAAuC;AAAEH,QAAAA;AAAF,OAAvC,CAAD,CAAR;AACAI,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCN,IAAI,CAACO,KAA7C;AACD,KANH,EAOGC,KAPH,CAOUf,CAAD,IAAOF,QAAQ,CAAC,IAAD,CAPxB;AAQD,GAXD;;AAaA,sBACE;AAAM,IAAA,QAAQ,EAAEC,YAAhB;AAAA,4BACE;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA,kBACGF,KAAK,IAAI;AADZ;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA,kBAA+BH,KAAK,CAACsB,MAAN,CAAad;AAA5C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AACE,QAAA,SAAS,EAAC,8BADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,WAAW,EAAC,OAHd;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,KAAK,EAAER,KAAK,CAACU,MAAN,CAAaF,KALtB;AAME,QAAA,QAAQ,EAAER,KAAK,CAACuB;AANlB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA,kBAA+BvB,KAAK,CAACsB,MAAN,CAAab;AAA5C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,8BADZ;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,WAAW,EAAC,UAHd;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,KAAK,EAAET,KAAK,CAACU,MAAN,CAAaD,QALtB;AAME,QAAA,QAAQ,EAAET,KAAK,CAACuB;AANlB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eA0BE;AACE,MAAA,SAAS,EAAC,sCADZ;AAEE,MAAA,QAAQ,EAAE,CAACvB,KAAK,CAACwB,OAAP,IAAkB,CAACxB,KAAK,CAACU,MAAN,CAAaF,KAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GArDQT,S;UACUJ,W,EACDC,U;;;KAFTG,S;AAuDT,MAAM0B,eAAe,GAAGhC,UAAU,CAAC;AACjCiC,EAAAA,gBAAgB,GAAG;AACjB;AACA,WAAO;AACLlB,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GAPgC;;AAQjCkB,EAAAA,gBAAgB,EAAEjC,GAAG,CAACkC,MAAJ,GAAaC,KAAb,CAAmB;AACnC;AACArB,IAAAA,KAAK,EAAEd,GAAG,CAACoC,MAAJ,GAAatB,KAAb,GAAqBuB,QAArB,CAA8B,mBAA9B,CAF4B;AAGnCtB,IAAAA,QAAQ,EAAEf,GAAG,CAACoC,MAAJ,GAAaC,QAAb,CAAsB,iCAAtB;AAHyB,GAAnB,CARe;AAajC1B,EAAAA,YAAY,EAAE,MAAM,CAAE;AAbW,CAAD,CAAV,CAcrBN,SAdqB,CAAxB;AAgBA,eAAe0B,eAAf","sourcesContent":["import React, { SyntheticEvent, useState } from \"react\";\nimport { withFormik, InjectedFormikProps } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { postUsersSignIn } from \"../../apis\";\nimport { saveUserInStore } from \"../../../../redux/actions\";\nimport { FormProps, FormValues } from \"./interface\";\n\nfunction FormLogin(props: InjectedFormikProps<FormProps, FormValues>) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (e: SyntheticEvent) => {\n    e.preventDefault();\n    const { email, password } = props.values;\n    postUsersSignIn({ email, password })\n      .then((res) => {\n        const user = res.data.user;\n        history.push(\"/\");\n        dispatch(saveUserInStore.saveUserInStoreSuccess({ user }));\n        window.localStorage.setItem(\"jwtToken\", user.token);\n      })\n      .catch((e) => setError(true));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <fieldset className=\"form-group\">\n        <p className=\"error-messages\">\n          {error && \"Email or password is invalid\"}\n        </p>\n        <p className=\"error-messages\">{props.errors.email}</p>\n        <input\n          className=\"form-control form-control-lg\"\n          type=\"text\"\n          placeholder=\"Email\"\n          name=\"email\"\n          value={props.values.email}\n          onChange={props.handleChange}\n        />\n      </fieldset>\n      <fieldset className=\"form-group\">\n        <p className=\"error-messages\">{props.errors.password}</p>\n        <input\n          className=\"form-control form-control-lg\"\n          type=\"password\"\n          placeholder=\"Password\"\n          name=\"password\"\n          value={props.values.password}\n          onChange={props.handleChange}\n        />\n      </fieldset>\n      <button\n        className=\"btn btn-lg btn-primary pull-xs-right\"\n        disabled={!props.isValid || !props.values.email}\n      >\n        Sign in\n      </button>\n    </form>\n  );\n}\n\nconst FormikFormLogin = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      email: \"\",\n      password: \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    email: Yup.string().email().required(\"Email is required\"),\n    password: Yup.string().required(\"Please provide a valid password\"),\n  }),\n  handleSubmit: () => {},\n})(FormLogin);\n\nexport default FormikFormLogin;\n"]},"metadata":{},"sourceType":"module"}